{"version":3,"sources":["Navbar.js","Main.js","Token.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","target","rel","this","props","account","Component","Main","id","onSubmit","event","name","symbol","burnable","mintable","preventDefault","value","toString","checked","supply","deployNewToken","htmlFor","type","ref","placeholder","required","Token","token","App","_name","_symbol","_totalSupply","_burnable","_mintable","a","setState","loading","concat","state","factory","methods","send","from","on","hash","getPastEvents","fromBlock","toBlock","err","events","TOKEN","length","returnValues","console","log","loadWeb3","loadBlockchainData","web3","window","eth","getAccounts","accounts","net","getId","networkId","factoryData","Factory","networks","Contract","abi","address","alert","ethereum","Web3","enable","currentProvider","content","role","style","maxWidth","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f972fb42.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"https://criptoeconomia.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          &nbsp; Creador de Tokens\n        </a>\n        <div\n          className= \"address_container\"\n         target =\"_blank\"\n        >\n          {this.props.account}\n        </div>\n\n  </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react'\n\nclass Main extends Component {\n\trender() {\n\n\t\treturn (\n\t\t\t<div id = \"content\" className= \"mt-3\">\n          <div className= \"card mb-4\" >\n                <div className = \"card-body\">\n                     <form className =\"mb-3\" onSubmit={(event) => {\n                      event.preventDefault()\n                      let name, symbol, burnable, mintable\n                      name = this.name.value.toString();\n                      symbol = this.symbol.value.toString();\n                      burnable = this.burnable.checked;\n                      mintable= this.mintable.checked;\n\n                      const supply = this.supply.value; \n\n                      this.props.deployNewToken(name, symbol, supply,burnable,mintable)\n                      \n                    }}>\n                         <div className = \"vertical\">\n                         <label  className =\"float-left\" htmlFor=\"name\">Token Name:</label><br/>\n                          <input \n                            type=\"text\" id=\"name\" name=\"name\"\n                            ref = {(name) => {this.name = name}}\n                            className= \"form-control form-control-lg\"\n                            placeholder= \"ElToken\"\n                            required /><br/>\n\n                            <label htmlFor=\"symbol\">Symbol:</label><br/>\n                            <input className= \"form-control form-control-lg\"\n                                   placeholder= \"TKN\" \n                                   type=\"text\" id=\"symbol\" name=\"symbol\"\n                                   ref = {(symbol) => {this.symbol =symbol}}\n                                   /><br/>\n                            <label htmlFor=\"supply\">Total Supply:</label><br/>\n                            <input className= \"form-control form-control-lg\"\n                                  placeholder= \"1000000000\" \n                                  type=\"number\" id=\"supply\" name=\"supply\"\n                                  ref = {(supply) => {this.supply =supply}}\n                                  /><br/>\n                            <label htmlFor=\"burnable\" className=\"container\">Burnable\n                            <small> (Any user can burn its own tokens)</small><br/>\n                            <small>(Cualquier usuario puede quemar sus propios tokens)</small>\n                            <input name =\"burnable\" type=\"checkbox\" \n                              id=\"burnable\"\n                              ref = {(burnable) => {this.burnable =burnable}}\n                            />\n                            <span className=\"checkmark\"></span>\n                          </label>\n\n                          <label className=\"container\">Mintable\n                          <small>(Any user can mint new tokens to his own address)</small><br/>\n                          <small>(Cualquier usuario puede imrpimir tokens a su propia dirección)</small>\n\n                            <input name = \"mintable\" type=\"checkbox\"\n                              id=\"mintable\"\n                              ref = {(mintable) => {this.mintable =mintable}}\n                            />\n                            <span className=\"checkmark\"></span>\n                          </label>\n\n                            </div>\n\n                        <input className = \"btn btn-primary btn-block btn-lg\" type=\"submit\" value=\"Submit!\"/>\n                     </form>\n\n                </div>\n            </div>\n        </div>\n\n\t\t\t);\n\t}\n}\n\nexport default Main;","import React, { Component } from 'react'\n\n\nclass Token extends Component {\n\n  render() {\n    return (\n        <div className=\"token viewer\">\n          &nbsp; Tu nuevo token:\n        <div\n          className= \"token_container\"\n         target =\"_blank\"\n        >\n          {this.props.token}\n        </div>\n        <div>\n            <br/>\n            1. Abre Metamask <br/>\n            2. Da click en \"agregar nuevo Token\"<br/>\n            3. Pega la dirección de tu token<br/>\n            4. Listo!! <br/>\n        </div>\n\n  </div>\n    );\n  }\n}\n\nexport default Token;\n","import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport './App.css'\nimport Factory from \"./contracts/Factory.json\";\nimport Token from './Token'\n\nclass App extends Component {\n\n   async componentWillMount() {\n      await this.loadWeb3()\n      await this.loadBlockchainData()\n   }\n\n   //fetch account to stater\n\n   async loadBlockchainData() {\n      const web3 = window.web3\n\n      const accounts = await web3.eth.getAccounts()\n      this.setState({account: accounts[0]})\n\n      const networkId = await web3.eth.net.getId()\n     \n\n      //Load DaiToken\n      // take token json from imported files, get networkId, that will give us\n      // the address \n      const factoryData = Factory.networks[networkId]\n      if(factoryData) { //create web3 version of token if it exists\n         //notice that dai and Dai are different\n         const factory = new web3.eth.Contract(Factory.abi, factoryData.address)\n         this.setState({factory})\n\n      } else {\n         window.alert('factory contract not deployed to detected network')\n      }\n      this.setState({ loading: false })\n   \n\n    }\n\n  // connect app to blockchain, taked from metamask webpage\n\n  async loadWeb3() {\n     if(window.ethereum) {\n        window.web3 = new Web3(window.ethereum)\n        await window.ethereum.enable()\n     }\n     else if(window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider)\n     }\n     else {\n        window.alert('No se ha detectado un browser de Ethereum. Considera descargar la extensión de Metamask')\n     }\n \n  }\n\n\n  deployNewToken = async (_name, _symbol, _totalSupply, _burnable, _mintable) => {\n    this.setState({ loading: true })\n    _totalSupply = _totalSupply.toString()\n    _totalSupply= _totalSupply.concat('000000000000000000')\n   await this.state.factory.methods.deployNewToken(\n      _name,\n      _symbol,\n      _totalSupply,\n      _burnable,\n      _mintable\n    ).send({from: this.state.account,\n      value: \"30000000000000000\"}).on('transactionHash', (hash) => {\n    this.setState({ loading: false })})\n    await this.state.factory.getPastEvents(\n      'AllEvents',\n      {\n        fromBlock: 0,\n        toBlock: 'latest'\n      },\n      (err, events) => {\n        const TOKEN = events[events.length-1].returnValues[0]\n        console.log(TOKEN)\n        this.setState({token: TOKEN})\n      }\n    )\n  }\n\n\n\n\n\n\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '0x0',\n      factory: {},\n      loading: true,\n      token: \"\",\n    }\n  }\n\n  render() {\n     let content = <Main\n      deployNewToken = {this.deployNewToken}\n      token = {this.state.token}\n        />\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '600px' }}>\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"https://www.criptoeconomia.org\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                </a>\n\n                {content}\n\n              </div>\n            </main>\n            <Token token={this.state.token}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Navbar.js","Main.js","Token.js","Guide.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","target","rel","this","props","account","Component","Main","id","class","onSubmit","event","name","symbol","burnable","mintable","preventDefault","value","toString","checked","supply","deployNewToken","htmlFor","type","ref","placeholder","required","Token","token","Guide","App","_name","_symbol","_totalSupply","_burnable","_mintable","a","setState","loading","concat","state","factory","methods","send","from","on","hash","getPastEvents","fromBlock","toBlock","err","events","TOKEN","length","returnValues","console","log","newToken","loadingpg","loadWeb3","loadBlockchainData","web3","window","eth","getAccounts","accounts","net","getId","networkId","factoryData","Factory","networks","Contract","abi","address","alert","ethereum","Web3","enable","currentProvider","content","role","style","maxWidth","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c81914b5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"https://criptoeconomia.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          &nbsp; Creador de Tokens\n        </a>\n        <div\n          className= \"address_container\"\n         target =\"_blank\"\n        >\n          {this.props.account}\n        </div>\n\n  </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react'\n\nclass Main extends Component {\n\trender() {\n\n\t\treturn (\n\t\t\t<div id = \"content\" className= \"mt-3\">\n          <div className= \"card mb-4\" >\n          <div>\n        <div class=\"alert alert-info\">\n                  <strong>Muy pronto funcionaremos en la red de Ethereum!</strong><br/>\n                </div>\n\n            </div>\n                <div className = \"card-body\">\n                     <form className =\"mb-3\" onSubmit={(event) => {\n                      event.preventDefault()\n                      let name, symbol, burnable, mintable\n                      name = this.name.value.toString();\n                      symbol = this.symbol.value.toString();\n                      burnable = this.burnable.checked;\n                      mintable= this.mintable.checked;\n\n                      const supply = this.supply.value; \n\n                      this.props.deployNewToken(name, symbol, supply,burnable,mintable)\n                      \n                    }}>\n                         <div className = \"vertical\">\n                         <label  className =\"float-left\" htmlFor=\"name\">Token Name:</label><br/>\n                          <input \n                            type=\"text\" id=\"name\" name=\"name\"\n                            ref = {(name) => {this.name = name}}\n                            className= \"form-control form-control-lg\"\n                            placeholder= \"ej. Safe Nice Coin\"\n                            required /><br/>\n\n                            <label htmlFor=\"symbol\">Symbol:</label><br/>\n                            <input className= \"form-control form-control-lg\"\n                                   placeholder= \"ej. SNC\" \n                                   type=\"text\" id=\"symbol\" name=\"symbol\"\n                                   ref = {(symbol) => {this.symbol =symbol}}\n                                   /><br/>\n                            <label htmlFor=\"supply\">Total Supply:</label><br/>\n                            <input className= \"form-control form-control-lg\"\n                                  placeholder= \"1000000000\" \n                                  type=\"number\" id=\"supply\" name=\"supply\"\n                                  ref = {(supply) => {this.supply =supply}}\n                                  /><br/>\n                            <label htmlFor=\"burnable\" className=\"container\">Burnable\n                            \n                            <input name =\"burnable\" type=\"checkbox\" \n                              id=\"burnable\"\n                              ref = {(burnable) => {this.burnable =burnable}}\n                            />\n                            <span className=\"checkmark\"></span>\n                          </label>\n                          <small> (Any user can burn its own tokens)</small><br/>\n                            <small>(Cualquier usuario puede quemar sus propios tokens)</small>\n\n                          <label className=\"container\">Mintable\n                            <input name = \"mintable\" type=\"checkbox\"\n                              id=\"mintable\"\n                              ref = {(mintable) => {this.mintable =mintable}}\n                            />\n                            <span className=\"checkmark\"></span>\n                          </label>\n                          <small>(Any user can mint new tokens to his own address)</small><br/>\n                          <small>(Cualquier usuario puede imprimir tokens a su propia dirección)</small>\n\n                            </div>\n\n                        <input className = \"btn btn-primary btn-block btn-lg\" type=\"submit\" value=\"Submit!\"/>\n                      <small><strong>fee:</strong> ~ 0.2 BNB, Do not change fee in transaction or Token won´t be created</small><br/>\n                      <small><strong>Costo:</strong> ~ 0.2 BNB, No cambies comisión de transacción o el Token no será creado</small>\n                     </form>\n\n                </div>\n\n            </div>\n\n\n                 <div class=\"alert alert-success\">\n                   <strong><a href=\"https://www.criptoeconomia.org\">Criptoeconomia.org</a></strong> <br/>\n                   Contactanos si quieres crear un Token personalizado <br/>\n                  Si quieres añadir Logo, Página Web, o tener tu Token en un intercambio como PancakeSwap o Uniswap nos puedes contactar! <br/>\n                <strong><a href=\"https://www.criptoeconomia.org\">Contact us </a>for a personalized Token</strong>\n                </div>\n        </div>\n\n\t\t\t);\n\t}\n}\n\nexport default Main;","import React, { Component } from 'react'\n\n\nclass Token extends Component {\n\n  render() {\n    return (\n        <div className=\"token viewer\">\n          \n      <div className=\"alert alert-success\">\n          <strong>Token Generado con éxito!</strong> <br/>\n        </div>\n          \n          &nbsp; Tu nuevo token:\n        <div\n          className= \"token_container\"\n         target =\"_blank\"\n        >\n          {this.props.token}\n        </div>\n        <div>\n        <div className= \"alert alert-success\">\n            <br/>\n            1. Abre Metamask <br/>\n            2. Da click en \"agregar nuevo Token\"<br/>\n            3. Pega la dirección de tu token<br/>\n            4. Listo!! <br/>\n        </div>\n        <div className= \"alert alert-success\">\n            <br/>\n            1. Open Metamask <br/>\n            2. Click on \"Add new Token\"<br/>\n            3. Paste your Token Address<br/>\n            4. Good to go!! <br/>\n        </div>\n        </div>\n  </div>\n    );\n  }\n}\n\nexport default Token;\n","import React, {Component} from 'react'\n\n\n\n\nclass Guide extends Component {\n\n    render() {\n      return (\n            <div><br/><br/><div class=\"alert alert-warning\">\n                <strong> Guía para interactuar con una aplicación descentralizada (DAPP)<br/>\n                Actualmente solo funcionamos en la red de Binance (BSC), pronto estaremos en Ethereum<br/>\n                    <p><string> Desde una computadora:</string></p>\n                <ol>\n                    <li>Descarga la extensión de <a href=\"https://metamask.io/download\">Metamask</a> para Google Chrome</li>\n                    <li>Una vez instalado, abre la extensión de Metamask</li>\n                    <li>Crea una nueva cuenta o importa tu cuenta de Binance si ya cuentas con una</li>\n                    <li>Conectate a la Red de Binance dando click en \"Custom RPC\"</li>\n                    <li>Network Name: Binance Smart Chain <br/>\n                        RPC URL: https://bsc-dataseed.binance.org/ <br/>\n                        ChainID: 56 <br/>\n                        Symbol: BNB <br/>\n                        Block Explorer: https://bscscan.com</li>\n                    <li>Vuelve a cargar esta págiina y listo!</li>\n\n                </ol>\n                <p><string> Desde un celular:</string></p>\n                <ol>\n                    <li>Descarga un browser descentralizado como <a href=\"https://mathwallet.org/en-us/\">MathWallet</a> o <a href=\"https://trustwallet.com\">TrustWallet</a></li>\n                    <li>Entra a la aplicación y crea una wallet de Binance o importa tu wallet si ya cuentas con una</li>\n                    \n                    <li>Entra a esta página desde la app y listo!</li>\n\n                </ol>\n                <p>Recuerda que las billeteras de Ethereum y Binance comparten la misma dirección\n                    <br/>\n                    Esto significa que si ya tienes una wallet de Ethereum entonces ya tienes una wallet de Binance :)\n                </p>\n               </strong>\n            </div></div>\n      );\n    }\n  }\n  \n  export default Guide;\n  ","import React, { Component } from 'react'\nimport Web3 from 'web3'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport './App.css'\nimport Factory from \"./contracts/Factory.json\";\nimport Token from './Token'\nimport Guide from './Guide'\n\nclass App extends Component {\n\n   async componentWillMount() {\n      await this.loadWeb3()\n      await this.loadBlockchainData()\n   }\n\n   //fetch account to stater\n\n   async loadBlockchainData() {\n      const web3 = window.web3\n\n      const accounts = await web3.eth.getAccounts()\n      this.setState({account: accounts[0]})\n\n      const networkId = await web3.eth.net.getId()\n     \n\n      //Load Factory Contract\n      // take token json from imported files, get networkId, that will give us\n      // the address \n      const factoryData = Factory.networks[networkId]\n      if(factoryData) { //create web3 version of factory if it exists\n         \n         const factory = new web3.eth.Contract(Factory.abi, factoryData.address)\n         this.setState({factory})\n         this.setState({ loadingpg: false })\n\n      } else {\n         window.alert('factory contract not deployed to detected network')\n      }\n\n   \n\n    }\n\n  // connect app to blockchain, taked from metamask webpage\n\n  async loadWeb3() {\n     if(window.ethereum) {\n        window.web3 = new Web3(window.ethereum)\n        await window.ethereum.enable()\n     }\n     else if(window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider)\n     }\n     else {\n        window.alert('No se ha detectado un browser de Ethereum. Considera descargar la extensión de Metamask')\n     }\n \n  }\n\n\n  deployNewToken = async (_name, _symbol, _totalSupply, _burnable, _mintable) => {\n    this.setState({ loading: true })\n    _totalSupply = _totalSupply.toString()\n    _totalSupply= _totalSupply.concat('000000000000000000')\n   await this.state.factory.methods.deployNewToken(\n      _name,\n      _symbol,\n      _totalSupply,\n      _burnable,\n      _mintable\n    ).send({from: this.state.account,\n      value: \"200000000000000000\"}).on('transactionHash', (hash) => {\n    this.setState({ loading: true })})\n    this.setState({ loading: true })\n    await this.state.factory.getPastEvents(\n      'AllEvents',\n      {\n        fromBlock: 0,\n        toBlock: 'latest'\n      },\n      (err, events) => {\n        const TOKEN = events[events.length-1].returnValues[0]\n        console.log(TOKEN)\n        this.setState({token: TOKEN})\n      }\n    )\n    this.setState({ loading: false })\n    this.setState({newToken: true})\n  }\n\n\n\n\n\n\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '0x0',\n      factory: {},\n      loading: false,\n      token: \"\",\n      loadingpg: true,\n      newToken: false,\n    }\n  }\n\n  render() {\n     let content\n     if (!this.state.loading && !this.state.loadingpg && !this.state.newToken){\n     content = <Main\n      deployNewToken = {this.deployNewToken}\n      token = {this.state.token}\n        />\n     } else if(this.state.newToken) {\n       content = <Token token={this.state.token}/>\n     }\n     \n     else if(this.state.loading){\n      content = <p id = \"loader\" className= \"text-center\"> Loading... <br/>\n      <div className=\"alert alert-warning\">\n      <strong>Warning!</strong> DO NOT CHANGE TRANSACTION VALUE OR TOKEN WONT BE DEPLOYED\n      </div>\n      <div className=\"alert alert-warning\">\n      <strong>ADVERTENCIA:</strong> NO CAMBIES EL VALOR DE LA TRANSACCIÓN, EL TOKEN NO SERÁ GENERADO \n      </div>\n      <div className=\"alert alert-info\">\n          <strong>Has click en confirmar para crear to Token Personalizado!</strong> <br/>\n        </div>\n     \n        <div className=\"alert alert-info\">\n          <strong>Creando Token...</strong> <br/>\n        </div>\n      </p>\n     } else {\n      content= <Guide/>\n     }\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '600px' }}>\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"https://www.criptoeconomia.org\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                </a>\n\n                {content}\n\n              </div>\n            </main>\n \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}